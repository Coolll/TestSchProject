<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wql.user.dao.UserDao">

    <!--新增用户-->
    <insert id="insertUser" parameterType="com.wql.user.model.UserEntity" useGeneratedKeys="true" keyProperty="user_id" keyColumn="user_id">
        insert into user_table(nick_name, password, user_poetry_class, poetry_storage, email, create_time, last_login_time, last_logout_time,last_update_time,user_token,head_image)
        values (
                #{nick_name,jdbcType=CHAR},
                #{password,jdbcType=CHAR},
                #{user_poetry_class,jdbcType=CHAR},
                #{poetry_storage,jdbcType=CHAR},
                #{email,jdbcType=CHAR},
                #{create_time,jdbcType=CHAR},
                #{last_login_time,jdbcType=CHAR},
                #{last_logout_time,jdbcType=CHAR},
                #{last_update_time,jdbcType=CHAR},
                #{user_token,jdbcType=CHAR},
                #{head_image,jdbcType=CHAR}

        )
    </insert>

    <!--更新用户信息-->
    <update id="updateUser" parameterType="com.wql.user.model.UserEntity">
        update user_table
        set
        user_id = #{user_id}
        <if test="nick_name != null">,nick_name=#{nick_name}</if>
        <if test="password != null">,password = #{password}</if>
        <if test="user_poetry_class != null">,user_poetry_class = #{user_poetry_class}</if>
        <if test="poetry_storage != null">,poetry_storage = #{poetry_storage}</if>
        <if test="email != null">,email = #{email}</if>
        <if test="last_login_time != null">,last_login_time = #{last_login_time}</if>
        <if test="last_logout_time != null">,last_logout_time=#{last_logout_time}</if>
        <if test="last_update_time != null">,last_update_time=#{last_update_time}</if>
        <if test="user_token != null">,user_token=#{user_token}</if>
        <if test="head_image != null">,head_image=#{head_image}</if>
        where user_id=#{user_id}
    </update>

    <!--更新用户头像-->
    <update id="updateUserHeadImage">
        update user_table
        set
        user_id = #{user_id}
        <if test="head_image != null">,head_image=#{head_image}</if>
        where user_id=#{user_id}
    </update>

    <!--根据昵称查找用户-->
    <select id="findUser" resultType="com.wql.user.model.UserEntity">
        select * from user_table
        <where>
            <if test="nick_name != null and nick_name != ''"> nick_name = #{nick_name}</if>
        </where>
    </select>

    <!--根据昵称以及UserID查找用户-->
    <select id="findUserInfo" resultType="com.wql.user.model.UserEntity">
        select * from user_table
        <where>
            1=1
            <if test="nick_name != null and nick_name != ''">and nick_name = #{nick_name}</if>
            <if test="user_id != null and user_id != 0">and user_id=#{user_id}</if>

        </where>
    </select>

    <!--查找用户的收藏列表-->
    <select id="findUserLikeList" resultType="java.lang.Integer">
        select poetry_id from like_poetry_table
        where user_id = #{user_id}
        order by poetry_id asc
    </select>

    <!--查找用户的收藏列表-->
    <select id="findUserCollectionList" resultMap="CollectionMap">
        select lt.user_id,lt.poetry_id,pt.poetry_id,pt.name,pt.author,pt.content,pt.likes,pt.class_info,pt.class_info_explain,pt.main_class,pt.main_class_explain,pt.source,pt.source_explain,pt.text_color,
        bt.class_info,bt.image_base_url,bt.origin_url
        from like_poetry_table lt
        left join
        poetry_table pt
        on lt.poetry_id = pt.poetry_id

        left join bgImage_table bt
        on bt.class_info = pt.class_info
        where
        lt.user_id = #{user_id}

        order by lt.poetry_id desc
        limit #{from_index},#{count}
    </select>

    <resultMap id="CollectionMap" type="com.wql.poetry.model.CollectionEntity">
        <result column="user_id" property="user_id"/>
        <result column="poetry_id" property="poetry_id"/>

        <association property="poetryEntity" javaType="com.wql.poetry.model.PoetryEntity">
            <result column="poetry_id" property="poetry_id"/>
            <result column="name" property="name"/>
            <result column="author" property="author"/>
            <result column="content" property="content"/>
            <result column="class_info" property="class_info"/>
            <result column="class_info_explain" property="class_info_explain"/>
            <result column="main_class" property="main_class"/>
            <result column="main_class_explain" property="main_class_explain"/>
            <result column="source" property="source"/>
            <result column="source_explain" property="source_explain"/>
            <result column="likes" property="likes"/>
            <result column="text_color" property="text_color"/>
        </association>

        <association property="imageEntity" javaType="com.wql.poetry.model.ImageEntity">
            <result column="image_base_url" property="image_base_url"/>
            <result column="origin_url" property="origin_url"/>
            <result column="class_info" property="class_info"/>
        </association>
    </resultMap>


</mapper>