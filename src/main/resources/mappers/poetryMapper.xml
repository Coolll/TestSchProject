<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wql.poetry.dao.PoetryDao">

    <!--新增诗词-->
    <insert id="insertPoetry" parameterType="com.wql.poetry.model.PoetryEntity" useGeneratedKeys="true" keyProperty="poetry_id" keyColumn="poetry_id">
        insert into poetry_table(poetry_id,name, author, content, addition_info, class_info,class_info_explain, main_class,main_class_explain, source,source_explain, transfer_info,likes)
        values (
        #{poetry_id,jdbcType=INTEGER},
        #{name,jdbcType=CHAR},
        #{author,jdbcType=CHAR},
        #{content,jdbcType=CHAR},
        #{addition_info,jdbcType=CHAR},
        #{class_info,jdbcType=CHAR},
        #{class_info_explain,jdbcType=CHAR},
        #{main_class,jdbcType=CHAR},
        #{main_class_explain,jdbcType=CHAR},
        #{source,jdbcType=CHAR},
        #{source_explain,jdbcType=CHAR},
        #{transfer_info,jdbcType=CHAR},
        #{likes,jdbcType=INTEGER}
        )
    </insert>

    <!--首页的热门诗词-->
    <select id="findHotPoetry" resultMap="PoetryDetailMap">
        select * from
        poetry_table pt
        left join
        bgImage_table bt
        on pt.class_info = bt.class_info
        where 1=1
        order by likes desc
        limit #{from_index},#{count}
    </select>

    <!--搜索收藏的诗词-->
    <select id="findLikePoetry" resultType="com.wql.poetry.model.LikePoetryEntity">
        select * from like_poetry_table
        where user_id=#{user_id} and poetry_id=#{poetry_id}
        limit 1
    </select>


    <!--收藏诗词-->
    <insert id="likePoetry" parameterType="com.wql.poetry.model.LikePoetryEntity" useGeneratedKeys="true" keyProperty="like_id" keyColumn="like_id">

        insert into like_poetry_table(user_id, poetry_id, create_time)
        values (
        #{user_id,jdbcType=INTEGER},
        #{poetry_id,jdbcType=INTEGER},
        #{create_time,jdbcType=CHAR}
        )
    </insert>

    <!--取消收藏诗词-->
    <delete id="dislikePoetry" parameterType="int">
        delete from like_poetry_table
        where
        user_id=#{user_id} and poetry_id=#{poetry_id}
    </delete>

    <!--获取到全部的诗词总配置-->
    <select id="findAllPoetryConfigure" resultType="com.wql.poetry.model.PoetryConfigureEntity">
        select * from poetry_configure_table
    </select>


    <!--获取到对应主分类的全部诗词-->
    <select id="findPoetryWithMainClass" resultMap="PoetryDetailMap">
        select * from
        poetry_table pt
        left join
        bgImage_table bt
        on pt.class_info = bt.class_info
        where pt.main_class = #{main_class}
        order by pt.poetry_id desc
    </select>


    <resultMap id="PoetryDetailMap" type="com.wql.poetry.model.PoetryDetailEntity">


        <result column="poetry_id" property="poetry_id"/>
        <result column="name" property="name"/>
        <result column="author" property="author"/>
        <result column="content" property="content"/>
        <result column="addition_info" property="addition_info"/>
        <result column="class_info" property="class_info"/>
        <result column="main_class" property="main_class"/>
        <result column="source" property="source"/>
        <result column="source_explain" property="source_explain"/>
        <result column="transfer_info" property="transfer_info"/>
        <result column="likes" property="likes"/>
        <result column="text_color" property="text_color"/>

        <association property="imageEntity" javaType="com.wql.poetry.model.ImageEntity">
            <result column="image_url" property="image_url"/>
            <result column="class_info" property="class_info"/>
            <result column="image_base_url" property="image_base_url"/>
            <result column="thumb_url" property="thumb_url"/>
            <result column="origin_url" property="origin_url"/>

        </association>
    </resultMap>


    <!--获取到对应主分类的全部诗词-->
    <select id="findPoetryWithKeywordAndPage" resultMap="PoetryDetailMap">
        select * from
        poetry_table pt
        left join
        bgImage_table bt
        on pt.class_info = bt.class_info
        <where>
            pt.name like CONCAT('%',#{keyword},'%')
            or pt.author like CONCAT('%',#{keyword},'%')
            or pt.content like CONCAT('%',#{keyword},'%')
        </where>
        order by pt.poetry_id desc
        limit #{from_index},#{count}
    </select>


    <!--根据poetry_id 和 count来搜索诗词-->
    <select id="findPoetryWithLimit" resultType="com.wql.poetry.model.PoetrySimpleEntity">
        select name,author,content from
        poetry_table
        where poetry_id >= #{poetry_id}
        order by poetry_id asc
        limit #{from_index},#{count}
    </select>

</mapper>